{"version":3,"sources":["components/Countries.jsx","Apollo/graphQl.js","services/generator.js","App.jsx","index.js"],"names":["Countries","item","useState","showItem","setShowItem","haveChildren","countries","length","haveLang","languages","useContext","TreeContext","registerCallback","removeCallback","callbacks","closeItem","useEffect","className","onClick","e","stopPropagation","prev","undefined","emoji","name","map","items","index","forEach","c","graphQl","client","ApolloClient","uri","cache","InMemoryCache","CountriesQueryDocument","gql","generateObjects","depth","childrenCount","faker","findName","Array","React","createContext","console","log","data","generateMockedData","App","useQuery","loading","setCallbacks","Backdrop","sx","color","zIndex","theme","drawer","open","CircularProgress","Provider","value","callback","indexOf","splice","style","width","margin","continents","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.a6aa28bd.chunk.js","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\nimport { TreeContext } from \"../App\";\n\nimport \"../App.css\";\n\nconst Countries = ({ item }) => {\n  const [showItem, setShowItem] = useState(false);\n  const haveChildren = item.countries && item.countries.length > 0;\n  const haveLang = item.languages && item.languages.length > 0;\n  const changeVisibility = () => setShowItem((prev) => !prev);\n\n  const { registerCallback, removeCallback, callbacks } = useContext(TreeContext);\n  const closeItem = () => setShowItem(false);\n\n  useEffect(() => {\n    if (haveChildren) {\n      registerCallback(closeItem);\n      return () => {\n        removeCallback(closeItem);\n      };\n    }\n  }, []);\n\n  return (\n    <>\n      <div className=\"countries\">\n        <h2\n          onClick={\n            haveChildren\n              ? (e) => {\n                  e.stopPropagation();\n                  changeVisibility();\n                }\n              : undefined\n          }\n          className=\"countries__name\"\n        >\n          {item.emoji}\n          {item.name}\n        </h2>\n        {haveLang && <span>{item.languages[0].name}</span>}\n      </div>\n\n      {haveChildren && showItem && (\n        <ul>\n          {item.countries.map((items, index) => (\n            <li\n              key={items.name}\n              onClick={() =>\n                index === item.countries.length - 1 &&\n                callbacks.forEach((c) => c())\n              }\n            >\n              <Countries item={items} />\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Countries;\n","import {\n    ApolloClient,\n    InMemoryCache,\n    gql,\n  } from \"@apollo/client\";\n\nconst client = new ApolloClient({\n    uri: \"https://countries.trevorblades.com/\",\n    cache: new InMemoryCache(),\n  });\n  \n  const CountriesQueryDocument = gql`\n    query {\n      continents {\n        code\n        name\n        countries {\n          name\n          emoji\n          languages {\n            name\n          }\n        }\n      }\n    }\n  `;\n  export const graphQl = {\n      client,CountriesQueryDocument\n  }","import * as faker from \"faker\";\n\n\nconst generateObjects = ({ depth, childrenCount }) => {\n    return {\n      name: faker.name.findName(),\n      countries:\n        depth > 0\n          ? [...new Array(childrenCount)].map(() => {\n              return generateObjects({ depth: depth - 1, childrenCount });\n            })\n          : [],\n    };\n  };\n  \n  export const generateMockedData = ({ depth, childrenCount }) => {\n    return {\n      data: [...new Array(childrenCount)].map(() => {\n        return generateObjects({ depth: depth - 1, childrenCount });\n      }),\n    };\n  };\n","import React, { useState } from \"react\";\nimport Countries from \"./components/Countries\";\nimport Backdrop from \"@mui/material/Backdrop\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\n\nimport { useQuery } from \"@apollo/client\";\nimport { graphQl } from \"./Apollo/graphQl\";\nimport { generateMockedData } from \"./services/generator\";\n\nexport const TreeContext = React.createContext();\n\nfunction App() {\n  const { loading, data } = useQuery(graphQl.CountriesQueryDocument);\n\n  const [callbacks, setCallbacks] = useState([]);\n  const registerCallback = (callback) =>\n    setCallbacks((prev) => [...prev, callback]);\n  const removeCallback = (callback) =>\n    setCallbacks((prev) => {\n      const index = prev.indexOf(callback);\n      if (index > -1) {\n        prev.splice(index, 1);\n        return prev;\n      }\n    });\n\n  return (\n    <>\n      {loading ? (\n        <Backdrop\n          sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }}\n          open\n        >\n          <CircularProgress color=\"inherit\" />\n        </Backdrop>\n      ) : (\n        <TreeContext.Provider value={{ callbacks, registerCallback, removeCallback }}>\n          <div className=\"App\" style={{ width: \"50%\", margin: \"0 15px\" }}>\n            {data.continents.map((item) => (\n              <Countries item={item} key={item.name} />\n            ))}\n          </div>\n        </TreeContext.Provider>\n      )}\n    </>\n  );\n}\n\nconsole.log(generateMockedData({ depth: 2, childrenCount: 2 }));\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport { graphQl } from \"./Apollo/graphQl\";\n\nReactDOM.render(\n  <ApolloProvider client={graphQl.client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}