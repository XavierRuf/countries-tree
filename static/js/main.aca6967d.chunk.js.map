{"version":3,"sources":["components/Countries.jsx","Apollo/graphQl.js","services/generator.js","App.jsx","index.js"],"names":["Countries","item","useState","showItem","setShowItem","haveChildren","countries","length","haveLang","languages","useContext","TreeContext","registerCallback","callbacks","useEffect","className","onClick","e","stopPropagation","prev","undefined","emoji","name","map","items","index","forEach","c","graphQl","client","ApolloClient","uri","cache","InMemoryCache","CountriesQueryDocument","gql","generateObjects","depth","childrenCount","faker","findName","Array","React","createContext","console","log","data","generateMockedData","App","useQuery","loading","setCallbacks","Backdrop","sx","color","zIndex","theme","drawer","open","CircularProgress","Provider","value","callback","style","width","margin","continents","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"8PAoDeA,EA/CG,SAAZA,EAAa,GAAc,IAAZC,EAAW,EAAXA,KAAW,EACEC,oBAAS,GADX,mBACvBC,EADuB,KACbC,EADa,KAExBC,EAAeJ,EAAKK,WAAaL,EAAKK,UAAUC,OAAS,EACzDC,EAAWP,EAAKQ,WAAaR,EAAKQ,UAAUF,OAAS,EAH7B,EAMQG,qBAAWC,GAA1CC,EANuB,EAMvBA,iBAAkBC,EANK,EAMLA,UAMzB,OAJAC,qBAAU,WACJT,GAAcO,GAAiB,kBAAMR,GAAY,QACpD,IAGD,qCACE,sBAAKW,UAAU,YAAf,UACE,qBACEC,QACEX,EACI,SAACY,GACCA,EAAEC,kBAfad,GAAY,SAACe,GAAD,OAAWA,WAkBxCC,EAENL,UAAU,kBATZ,UAWGd,EAAKoB,MACLpB,EAAKqB,QAEPd,GAAY,+BAAOP,EAAKQ,UAAU,GAAGa,UAGvCjB,GAAgBF,GACf,6BACGF,EAAKK,UAAUiB,KAAI,SAACC,EAAOC,GAAR,OAClB,oBAAqBT,QAAS,kBAAMS,IAAUxB,EAAKK,UAAUC,OAAS,GAAKM,EAAUa,SAAQ,SAAAC,GAAC,OAAIA,QAAlG,SACE,cAAC3B,EAAD,CACEC,KAAMuB,KAFDA,EAAMF,e,oECdZM,EAAU,CACnBC,OArBS,IAAIC,IAAa,CAC5BC,IAAK,sCACLC,MAAO,IAAIC,MAmBFC,uBAhBoBC,YAAH,mO,QCRxBC,EAAkB,SAAlBA,EAAmB,GAA8B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,cAC9B,MAAO,CACLhB,KAAMiB,OAAWC,WACjBlC,UACE+B,EAAQ,EACJ,YAAI,IAAII,MAAMH,IAAgBf,KAAI,WAChC,OAAOa,EAAgB,CAAEC,MAAOA,EAAQ,EAAGC,qBAE7C,KCFC3B,EAAc+B,IAAMC,gBA0BjCC,QAAQC,IDpB4B,SAAC,GAA8B,IAA5BR,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,cAC1C,MAAO,CACLQ,KAAM,YAAI,IAAIL,MAAMH,IAAgBf,KAAI,WACtC,OAAOa,EAAgB,CAAEC,MAAOA,EAAQ,EAAGC,sBCiBvCS,CAAmB,CAAEV,MAAO,EAAGC,cAAe,KAE3CU,MA1Bf,WAAgB,IAAD,EACaC,YAASrB,EAAQM,wBAAnCgB,EADK,EACLA,QAASJ,EADJ,EACIA,KADJ,EAGqB5C,mBAAS,IAH9B,mBAGNW,EAHM,KAGKsC,EAHL,KAMb,OACE,mCACGD,EACC,cAACE,EAAA,EAAD,CAAUC,GAAI,CAAEC,MAAO,OAAQC,OAAQ,SAACC,GAAD,OAAWA,EAAMD,OAAOE,OAAS,IAAKC,MAAI,EAAjF,SACE,cAACC,EAAA,EAAD,CAAkBL,MAAM,cAG1B,cAAC3C,EAAYiD,SAAb,CAAsBC,MAAO,CAAEhD,YAAWD,iBATvB,SAACkD,GAAD,OAAcX,GAAa,SAAAhC,GAAI,4BAAQA,GAAR,CAAc2C,SAShE,SACE,qBAAK/C,UAAU,MAAMgD,MAAO,CAAEC,MAAO,MAAOC,OAAQ,UAApD,SACCnB,EAAKoB,WAAW3C,KAAI,SAACtB,GAAD,OAAU,cAAC,EAAD,CAAWA,KAAMA,GAAWA,EAAKqB,gB,UCnB1E6C,IAASC,OACP,cAACC,EAAA,EAAD,CAAgBxC,OAAQD,EAAQC,OAAhC,SACE,cAAC,EAAD,MAEFyC,SAASC,eAAe,W","file":"static/js/main.aca6967d.chunk.js","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\nimport {TreeContext} from \"../App\";\n\nimport \"../App.css\";\n\nconst Countries = ({ item }) => {\n  const [showItem, setShowItem] = useState(false);\n  const haveChildren = item.countries && item.countries.length > 0;\n  const haveLang = item.languages && item.languages.length > 0;\n  const changeVisibility = () => setShowItem((prev) => !prev);\n\n  const {registerCallback, callbacks} = useContext(TreeContext);\n\n  useEffect(() => {\n    if (haveChildren) registerCallback(() => setShowItem(false));\n  }, [])\n\n  return (\n    <>\n      <div className=\"countries\">\n        <h2\n          onClick={\n            haveChildren\n              ? (e) => {\n                  e.stopPropagation();\n                  changeVisibility();\n                }\n              : undefined\n          }\n          className=\"countries__name\"\n        >\n          {item.emoji}\n          {item.name}\n        </h2>\n        {haveLang && <span>{item.languages[0].name}</span>}\n      </div>\n\n      {haveChildren && showItem && (\n        <ul>\n          {item.countries.map((items, index) => (\n            <li key={items.name} onClick={() => index === item.countries.length - 1 && callbacks.forEach(c => c())}>\n              <Countries\n                item={items}\n              />\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Countries;\n","import {\n    ApolloClient,\n    InMemoryCache,\n    gql,\n  } from \"@apollo/client\";\n\nconst client = new ApolloClient({\n    uri: \"https://countries.trevorblades.com/\",\n    cache: new InMemoryCache(),\n  });\n  \n  const CountriesQueryDocument = gql`\n    query {\n      continents {\n        code\n        name\n        countries {\n          name\n          emoji\n          languages {\n            name\n          }\n        }\n      }\n    }\n  `;\n  export const graphQl = {\n      client,CountriesQueryDocument\n  }","import * as faker from \"faker\";\n\n\nconst generateObjects = ({ depth, childrenCount }) => {\n    return {\n      name: faker.name.findName(),\n      countries:\n        depth > 0\n          ? [...new Array(childrenCount)].map(() => {\n              return generateObjects({ depth: depth - 1, childrenCount });\n            })\n          : [],\n    };\n  };\n  \n  export const generateMockedData = ({ depth, childrenCount }) => {\n    return {\n      data: [...new Array(childrenCount)].map(() => {\n        return generateObjects({ depth: depth - 1, childrenCount });\n      }),\n    };\n  };\n","import React, {useState} from \"react\";\nimport Countries from \"./components/Countries\";\nimport Backdrop from \"@mui/material/Backdrop\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\n\nimport { useQuery } from \"@apollo/client\";\nimport { graphQl } from \"./Apollo/graphQl\";\nimport { generateMockedData } from \"./services/generator\";\n\nexport const TreeContext = React.createContext();\n\nfunction App() {\n  const { loading, data } = useQuery(graphQl.CountriesQueryDocument);\n\n  const [callbacks, setCallbacks] = useState([]);\n  const registerCallback = (callback) => setCallbacks(prev => [...prev, callback]);\n\n  return (\n    <>\n      {loading ? (\n        <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open>\n          <CircularProgress color=\"inherit\" />\n        </Backdrop>\n      ) : (\n        <TreeContext.Provider value={{ callbacks, registerCallback }}>\n          <div className=\"App\" style={{ width: \"50%\", margin: \"0 15px\" }}>\n          {data.continents.map((item) => <Countries item={item} key={item.name} /> )}\n        </div>\n        </TreeContext.Provider>\n      )}\n    </>\n  );\n\n}\n\nconsole.log(generateMockedData({ depth: 2, childrenCount: 2 }));\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport { graphQl } from \"./Apollo/graphQl\";\n\nReactDOM.render(\n  <ApolloProvider client={graphQl.client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}