{"version":3,"sources":["components/Countries.jsx","Apollo/graphQl.js","services/generator.js","App.jsx","index.js"],"names":["Countries","item","languages","useState","showItem","setShowItem","haveChildren","countries","length","className","onClick","e","stopPropagation","prev","undefined","emoji","name","map","items","graphQl","client","ApolloClient","uri","cache","InMemoryCache","CountriesQueryDocument","gql","generateObjects","depth","childrenCount","faker","findName","Array","console","log","data","generateMockedData","App","useQuery","loading","Backdrop","sx","color","zIndex","theme","drawer","open","CircularProgress","style","width","margin","continents","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"6OA+CeA,EA3CG,SAAZA,EAAa,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UAAgB,EACTC,oBAAS,GADA,mBAClCC,EADkC,KACxBC,EADwB,KAEnCC,EAAeL,EAAKM,WAAaN,EAAKM,UAAUC,OAAS,EAG/D,OACE,qCACE,sBAAKC,UAAU,YAAf,UACE,qBACEC,QACEJ,EACI,SAACK,GACCA,EAAEC,kBATaP,GAAY,SAACQ,GAAD,OAAWA,WAYxCC,EAENL,UAAU,kBATZ,UAWGR,EAAKc,MACLd,EAAKe,QAER,+BAAOd,OAGRI,GAAgBF,GACf,6BACGH,EAAKM,UAAUU,KAAI,SAACC,GAAD,OAClB,6BACE,cAAClB,EAAD,CACEC,KAAMiB,EACNhB,UACEgB,EAAMhB,UAAUM,OAAS,EAAzB,iBAAuCU,EAAMhB,UAAU,GAAGc,MAAS,MAJhEE,EAAMF,e,oECNZG,EAAU,CACnBC,OArBS,IAAIC,IAAa,CAC5BC,IAAK,sCACLC,MAAO,IAAIC,MAmBFC,uBAhBoBC,YAAH,mO,gBCRxBC,EAAkB,SAAlBA,EAAmB,GAA8B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,cAC9B,MAAO,CACLb,KAAMc,OAAWC,WACjBxB,UACEqB,EAAQ,EACJ,YAAI,IAAII,MAAMH,IAAgBZ,KAAI,WAChC,OAAOU,EAAgB,CAAEC,MAAOA,EAAQ,EAAGC,qBAE7C,KCkBZI,QAAQC,IDd4B,SAAC,GAA8B,IAA5BN,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,cAC1C,MAAO,CACLM,KAAM,YAAI,IAAIH,MAAMH,IAAgBZ,KAAI,WACtC,OAAOU,EAAgB,CAAEC,MAAOA,EAAQ,EAAGC,sBCWvCO,CAAmB,CAAER,MAAO,EAAGC,cAAe,KAE3CQ,MAtBf,WAAgB,IAAD,EACaC,YAASnB,EAAQM,wBAAnCc,EADK,EACLA,QAASJ,EADJ,EACIA,KAEjB,OADAF,QAAQC,IAAIC,GAEV,mCACGI,EACC,cAACC,EAAA,EAAD,CAAUC,GAAI,CAAEC,MAAO,OAAQC,OAAQ,SAACC,GAAD,OAAWA,EAAMD,OAAOE,OAAS,IAAKC,MAAI,EAAjF,SACE,cAACC,EAAA,EAAD,CAAkBL,MAAM,cAG1B,qBAAKjC,UAAU,MAAMuC,MAAO,CAAEC,MAAO,QAASC,OAAQ,UAAtD,SACGf,EAAKgB,WAAWlC,KAAI,SAAChB,GAAD,OACnB,cAAC,EAAD,CAAWA,KAAMA,GAAWA,EAAKe,c,UCd7CoC,IAASC,OACP,cAACC,EAAA,EAAD,CAAgBlC,OAAQD,EAAQC,OAAhC,SACE,cAAC,EAAD,MAEFmC,SAASC,eAAe,W","file":"static/js/main.a9b583e4.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport \"../App.css\";\n\nconst Countries = ({ item, languages }) => {\n  const [showItem, setShowItem] = useState(false);\n  const haveChildren = item.countries && item.countries.length > 0;\n  const changeVisibility = () => setShowItem((prev) => !prev);\n\n  return (\n    <>\n      <div className=\"countries\">\n        <h2\n          onClick={\n            haveChildren\n              ? (e) => {\n                  e.stopPropagation();\n                  changeVisibility();\n                }\n              : undefined\n          }\n          className=\"countries__name\"\n        >\n          {item.emoji}\n          {item.name}\n        </h2>\n        <span>{languages}</span>\n      </div>\n\n      {haveChildren && showItem && (\n        <ul>\n          {item.countries.map((items) => (\n            <li key={items.name}>\n              <Countries\n                item={items}\n                languages={\n                  items.languages.length > 0 ? ` lang: ${items.languages[0].name}` : \"\"\n                }\n              />\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Countries;\n","import {\n    ApolloClient,\n    InMemoryCache,\n    gql,\n  } from \"@apollo/client\";\n\nconst client = new ApolloClient({\n    uri: \"https://countries.trevorblades.com/\",\n    cache: new InMemoryCache(),\n  });\n  \n  const CountriesQueryDocument = gql`\n    query {\n      continents {\n        code\n        name\n        countries {\n          name\n          emoji\n          languages {\n            name\n          }\n        }\n      }\n    }\n  `;\n  export const graphQl = {\n      client,CountriesQueryDocument\n  }","import * as faker from \"faker\";\n\n\nconst generateObjects = ({ depth, childrenCount }) => {\n    return {\n      name: faker.name.findName(),\n      countries:\n        depth > 0\n          ? [...new Array(childrenCount)].map(() => {\n              return generateObjects({ depth: depth - 1, childrenCount });\n            })\n          : [],\n    };\n  };\n  \n  export const generateMockedData = ({ depth, childrenCount }) => {\n    return {\n      data: [...new Array(childrenCount)].map(() => {\n        return generateObjects({ depth: depth - 1, childrenCount });\n      }),\n    };\n  };\n","import React from \"react\";\nimport Countries from \"./components/Countries\";\nimport Backdrop from \"@mui/material/Backdrop\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\n\nimport { useQuery } from \"@apollo/client\";\nimport { graphQl } from \"./Apollo/graphQl\";\nimport { generateMockedData } from \"./services/generator\";\n\nfunction App() {\n  const { loading, data } = useQuery(graphQl.CountriesQueryDocument);\n  console.log(data)\n  return (\n    <>\n      {loading ? (\n        <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open>\n          <CircularProgress color=\"inherit\" />\n        </Backdrop>\n      ) : (\n        <div className=\"App\" style={{ width: \"700px\", margin: \"0 15px\" }}>\n          {data.continents.map((item) => (\n            <Countries item={item} key={item.name} />\n          ))}\n        </div>\n      )}\n    </>\n  );\n}\n\nconsole.log(generateMockedData({ depth: 2, childrenCount: 2 }));\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport { graphQl } from \"./Apollo/graphQl\";\n\nReactDOM.render(\n  <ApolloProvider client={graphQl.client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}